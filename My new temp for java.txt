import java.util.*;
import java.lang.*;
import java.io.*;

public class Main {
    static class Reader {
        public BufferedReader br;
        StringTokenizer st = new StringTokenizer("");

        public Reader() {
            this(System.in);
        }

        public Reader(InputStream input) {
            br = new BufferedReader(new InputStreamReader(input));
        }

        String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int ni() {
            return Integer.parseInt(next());
        }

        long nl() {
            return Long.parseLong(next());
        }

        double nd() {
            return Double.parseDouble(next());
        }

        String nextl() {
            String str = "";
            try {
                str = br.readLine().trim();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return str;
        }

        int[] arrin(long num) {
            int n = (int) num;
            int[] a = new int[n];
            for (int i = 0; i < n; i++) a[i] = ni();
            return a;
        }

        long[] arrnl(long num) {
            int n = (int) num;
            long[] l = new long[n];
            for (int i = 0; i < n; i++) l[i] = nl();
            return l;
        }
    }

    //<------------------------------------------------WRITER---------------------------->
    static class Writer {
        static PrintWriter out;

        public Writer() {
            this(System.out);
        }

        public Writer(OutputStream outs) {
            out = new PrintWriter(outs);
        }

        public void pl(int i) {
            out.println(i);
        }

        public void pl(long l) {
            out.println(l);
        }

        public void pl(double d) {
            out.println(d);
        }

        public void pl(String s) {
            out.println(s);
        }

        public void p(int i) {
            out.print(i);
        }

        public void p(long l) {
            out.print(l);
        }

        public void p(double d) {
            out.print(d);
        }

        public void p(String s) {
            out.print(s);
        }

        public void p() {
            out.println();
        }

        public void close() {
            out.close();
        }
    }


    //input shenanigans
      /*
         Random stuff to try when stuck:
            -if it's 2C then it's dp
            -for combo/probability problems, expand the given form we're interested in
            -make everything the same then build an answer (constructive, make everything 0 then do something)
            -something appears in parts of 2 --> model as graph
            -assume a greedy then try to show why it works
            -find way to simplify into one variable if multiple exist
            -treat it like fmc (note any passing thoughts/algo that could be used so you can revisit them)
            -find lower and upper bounds on answer
            -figure out what ur trying to find and isolate it
            -see what observations you have and come up with more continuations
            -work backwards (in constructive, go from the goal to the start)
            -turn into prefix/suffix sum argument (often works if problem revolves around adjacent array elements)
            -instead of solving for answer, try solving for complement (ex, find n-(min) instead of max)
            -draw something
            -simulate a process
            -dont implement something unless if ur fairly confident its correct
            -after 3 bad submissions move on to next problem if applicable
            -do something instead of nothing and stay organized
            -write stuff down
         Random stuff to check when wa:
            -if code is way too long/cancer then reassess
            -switched N/M
            -int overflow
            -switched variables
            -wrong MOD
            -hardcoded edge case incorrectly
         Random stuff to check when tle:
            -continue instead of break
            -condition in for/while loop bad
         Random stuff to check when rte:
            -switched N/M
            -long to int/int overflow
            -division by 0
            -edge case for empty list/data structure/N=1
      */


//----------------------------------------------------------------------------------->

    //--------------------------VARIABLES------------------------------------//
    static Reader in = new Reader();
    static OutputStream outputStream = System.out;
    static Writer out = new Writer(outputStream);
    static long lmax = Long.MAX_VALUE, lmin = Long.MIN_VALUE;
    static int imax = Integer.MAX_VALUE, imin = Integer.MIN_VALUE;
    static int mod = 1000000007;
    static long mod1 = 998244353;
    //-----------------------------------------------------------------------//

    //--------------------------Red_Hair-----------------------------------//
    private static void Red_Hair() throws IOException {
        String FILE = "RED";
        try { FILE = System.getProperty("user.dir"); }
        catch (Exception e) { }
        if(new File(FILE).getName().equals("CP")) {
            out = new Writer(new FileOutputStream("output.txt"));
            in = new Reader(new FileInputStream("input.txt"));
        }
    }

    //-----------------------------------------------------------------------//
    public static void main(String[] args) throws IOException {
        Red_Hair();
        int t = 1;
        t = in.ni();
        while (t-- > 0) {
            solve();
        }
        out.close();
    }

    public static boolean isPrime(long n)
    {
        if(n < 2) return false;
        if(n == 2 || n == 3) return true;
        if(n%2 == 0 || n%3 == 0) return false;
        long sqrtN = (long)Math.sqrt(n)+1;
        for(long i = 6L; i <= sqrtN; i += 6) {
            if(n%(i-1) == 0 || n%(i+1) == 0) return false;
        }
        return true;
    }
    public static ArrayList<Integer> findDiv(int N)
    {
        //gens all divisors of N
        ArrayList<Integer> ls1 = new ArrayList<Integer>();
        ArrayList<Integer> ls2 = new ArrayList<Integer>();
        for(int i=1; i <= (int)(Math.sqrt(N)+0.00000001); i++)
            if(N%i == 0)
            {
                ls1.add(i);
                ls2.add(N/i);
            }
        Collections.reverse(ls2);
        for(int b: ls2)
            if(b != ls1.get(ls1.size()-1))
                ls1.add(b);
        return ls1;
    }
    public static void sort(int[] arr)
    {
        //because Arrays.sort() uses quicksort which is dumb
        //Collections.sort() uses merge sort
        ArrayList<Integer> ls = new ArrayList<Integer>();
        for(int x: arr)
            ls.add(x);
        Collections.sort(ls);
        for(int i=0; i < arr.length; i++)
            arr[i] = ls.get(i);
    }
    public static long power(long x, long y, long p)
    {
        //0^0 = 1
        long res = 1L;
        x = x%p;
        while(y > 0)
        {
            if((y&1)==1)
                res = (res*x)%p;
            y >>= 1;
            x = (x*x)%p;
        }
        return res;
    }
    //custom multiset (replace with HashMap if needed)
    public static void push(TreeMap<Integer, Integer> map, int k, int v)
    {
        //map[k] += v;
        if(!map.containsKey(k))
            map.put(k, v);
        else
            map.put(k, map.get(k)+v);
    }
    public static void pull(TreeMap<Integer, Integer> map, int k, int v)
    {
        //assumes map[k] >= v
        //map[k] -= v
        int lol = map.get(k);
        if(lol == v)
            map.remove(k);
        else
            map.put(k, lol-v);
    }
    public static int[] compress(int[] arr)
    {
        ArrayList<Integer> ls = new ArrayList<Integer>();
        for(int x: arr)
            ls.add(x);
        Collections.sort(ls);
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        int boof = 1; //min value
        for(int x: ls)
            if(!map.containsKey(x))
                map.put(x, boof++);
        int[] brr = new int[arr.length];
        for(int i=0; i < arr.length; i++)
            brr[i] = map.get(arr[i]);
        return brr;
    }
    public static long[][] multiply(long[][] left, long[][] right)
    {
        long MOD = 1000000007L;
        int N = left.length;
        int M = right[0].length;
        long[][] res = new long[N][M];
        for(int a=0; a < N; a++)
            for(int b=0; b < M; b++)
                for(int c=0; c < left[0].length; c++)
                {
                    res[a][b] += (left[a][c]*right[c][b])%MOD;
                    if(res[a][b] >= MOD)
                        res[a][b] -= MOD;
                }
        return res;
    }
    public static long[][] power(long[][] grid, long pow)
    {
        long[][] res = new long[grid.length][grid[0].length];
        for(int i=0; i < res.length; i++)
            res[i][i] = 1L;
        long[][] curr = grid.clone();
        while(pow > 0)
        {
            if((pow&1L) == 1L)
                res = multiply(curr, res);
            pow >>= 1;
            curr = multiply(curr, curr);
        }
        return res;
    }
    class DSU
    {
        public int[] dsu;
        public int[] size;

        public DSU(int N)
        {
            dsu = new int[N+1];
            size = new int[N+1];
            for(int i=0; i <= N; i++)
            {
                dsu[i] = i;
                size[i] = 1;
            }
        }
        //with path compression, no find by rank
        public int find(int x)
        {
            return dsu[x] == x ? x : (dsu[x] = find(dsu[x]));
        }
        public void merge(int x, int y)
        {
            int fx = find(x);
            int fy = find(y);
            dsu[fx] = fy;
        }
        public void merge(int x, int y, boolean sized)
        {
            int fx = find(x);
            int fy = find(y);
            size[fy] += size[fx];
            dsu[fx] = fy;
        }
    }
    class FenwickTree
    {
        //Binary Indexed Tree
        //1 indexed
        public int[] tree;
        public int size;

        public FenwickTree(int size)
        {
            this.size = size;
            tree = new int[size+5];
        }
        public void add(int i, int v)
        {
            while(i <= size)
            {
                tree[i] += v;
                i += i&-i;
            }
        }
        public int find(int i)
        {
            int res = 0;
            while(i >= 1)
            {
                res += tree[i];
                i -= i&-i;
            }
            return res;
        }
        public int find(int l, int r)
        {
            return find(r)-find(l-1);
        }
    }
    class SegmentTree
    {
        //Tlatoani's segment tree
        //iterative implementation = low constant runtime factor
        //range query, non lazy
        final int[] val;
        final int treeFrom;
        final int length;

        public SegmentTree(int treeFrom, int treeTo)
        {
            this.treeFrom = treeFrom;
            int length = treeTo - treeFrom + 1;
            int l;
            for (l = 0; (1 << l) < length; l++);
            val = new int[1 << (l + 1)];
            this.length = 1 << l;
        }
        public void update(int index, int delta)
        {
            //replaces value
            int node = index - treeFrom + length;
            val[node] = delta;
            for (node >>= 1; node > 0; node >>= 1)
                val[node] = comb(val[node << 1], val[(node << 1) + 1]);
        }
        public int query(int from, int to)
        {
            //inclusive bounds
            if (to < from)
                return 0; //0 or 1?
            from += length - treeFrom;
            to += length - treeFrom + 1;
            //0 or 1?
            int res = 0;
            for (; from + (from & -from) <= to; from += from & -from)
                res = comb(res, val[from / (from & -from)]);
            for (; to - (to & -to) >= from; to -= to & -to)
                res = comb(res, val[(to - (to & -to)) / (to & -to)]);
            return res;
        }
        public int comb(int a, int b)
        {
            //change this
            return Math.max(a,b);
        }
    }
    class LCA
    {
        public int N, root;
        public ArrayDeque<Integer>[] edges;
        private int[] enter;
        private int[] exit;
        private int LOG = 17; //change this
        private int[][] dp;

        public LCA(int n, ArrayDeque<Integer>[] edges, int r)
        {
            N = n;   root = r;
            enter = new int[N+1];
            exit = new int[N+1];
            dp = new int[N+1][LOG];
            this.edges = edges;
            int[] time = new int[1];
            //change to iterative dfs if N is large
            dfs(root, 0, time);
            dp[root][0] = 1;
            for(int b=1; b < LOG; b++)
                for(int v=1; v <= N; v++)
                    dp[v][b] = dp[dp[v][b-1]][b-1];
        }
        private void dfs(int curr, int par, int[] time)
        {
            dp[curr][0] = par;
            enter[curr] = ++time[0];
            for(int next: edges[curr])
                if(next != par)
                    dfs(next, curr, time);
            exit[curr] = ++time[0];
        }
        public int lca(int x, int y)
        {
            if(isAnc(x, y))
                return x;
            if(isAnc(y, x))
                return y;
            int curr = x;
            for(int b=LOG-1; b >= 0; b--)
            {
                int temp = dp[curr][b];
                if(!isAnc(temp, y))
                    curr = temp;
            }
            return dp[curr][0];
        }
        private boolean isAnc(int anc, int curr)
        {
            return enter[anc] <= enter[curr] && exit[anc] >= exit[curr];
        }
    }
    class BitSet
    {
        private int CONS = 62; //safe
        public long[] sets;
        public int size;

        public BitSet(int N)
        {
            size = N;
            if(N%CONS == 0)
                sets = new long[N/CONS];
            else
                sets = new long[N/CONS+1];
        }
        public void add(int i)
        {
            int dex = i/CONS;
            int thing = i%CONS;
            sets[dex] |= (1L << thing);
        }
        public int and(BitSet oth)
        {
            int boof = Math.min(sets.length, oth.sets.length);
            int res = 0;
            for(int i=0; i < boof; i++)
                res += Long.bitCount(sets[i] & oth.sets[i]);
            return res;
        }
        public int xor(BitSet oth)
        {
            int boof = Math.min(sets.length, oth.sets.length);
            int res = 0;
            for(int i=0; i < boof; i++)
                res += Long.bitCount(sets[i] ^ oth.sets[i]);
            return res;
        }
    }
    static long gcd(long a, long b) {
        if (a == 0) {
            return b;
        }
        return gcd(b % a, a);
    }

    static int upperBound (long[] arr, long elem) {
        int l = 0;
        int r = arr.length;
        while(l < r) {
            int mid = (l+r)/2;
            if(arr[mid] > elem) {
                r = mid;
            } else l = mid+1;
        }
        return r;
    }

    static void swap(int[] arr, int index1, int index2) {
        int temp = arr[index1];
        arr[index1] = arr[index2];
        arr[index2] = temp;
    }

    static int[][] move = {
            {0, 1}, {1, 0}, { -1, 0}, {0, -1}
    };

    static final long MOD = 1000000007;

    static long power(long A, long B, int mod) {
        if (B == 0)
            return 1 % mod;

        long res = power(A, B / 2, mod);

        if (B % 2 == 1)
            return (((res % mod) * (res % mod) * (A % mod)) % mod);
        else
            return ((res % mod) * (res % mod)) % mod;
    }

    static int lowerBound (long[] arr, long elem) {
        int l = 0;
        int r = arr.length;
        while(l < r) {
            int mid = (l+r)/2;
            if(arr[mid] >= elem) {
                r = mid;
            } else l = mid+1;
        }
        return l;
    }
    public static List<Integer> computeLPS(String pattern) {
        int len = 0;
        List<Integer> lps = new ArrayList<>(pattern.length());
        for (int i = 0; i < pattern.length(); i++) {
            lps.add(0);
        }

        int i = 1;
        while (i < pattern.length()) {
            if (pattern.charAt(i) == pattern.charAt(len)) {
                len++;
                lps.set(i, len);
                i++;
            } else {
                if (len != 0) {
                    len = lps.get(len - 1);
                } else {
                    lps.set(i, 0);
                    i++;
                }
            }
        }
        return lps;
    }

    public static List<Integer> KMPSearch(String text, String pattern) {
        List<Integer> indexes = new ArrayList<>();
        int N = text.length();
        int M = pattern.length();

        List<Integer> lps = computeLPS(pattern);

        int i = 0;
        int j = 0;

        while (i < N) {
            if (pattern.charAt(j) == text.charAt(i)) {
                i++;
                j++;
            }

            if (j == M) {
                indexes.add(i - j);
                j = lps.get(j - 1);
            } else if (i < N && pattern.charAt(j) != text.charAt(i)) {
                if (j != 0)
                    j = lps.get(j - 1);
                else
                    i++;
            }
        }

        return indexes;
    }

    public static void reverseArray(long[] arr) {
        int start = 0;
        int end = arr.length - 1;

        while (start < end) {
            // Swap elements at start and end indices
            long temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;

            // Move towards the center of the array
            start++;
            end--;
        }
    }

   
    static void solve() throws IOException {
        
    }
    static class pr <T extends Comparable<T>, V extends Comparable<V>> implements Comparable<pr<T, V>> {
        T a;
        V b;
        public pr(T a, V b) {
            this.a = a;
            this.b = b;
        }
        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof pr)) return false;
            pr<?, ?> pr = (pr<?, ?>) o;
            return a.equals(pr.a) && b.equals(pr.b);
        }

        @Override
        public int hashCode() {
            return Objects.hash(a, b);
        }

        @Override
        public int compareTo(pr o) {
            return this.a.compareTo(((T) o.a));
        }
    }
}

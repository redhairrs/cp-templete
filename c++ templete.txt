#include <bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
// Policy Based Data Structure
// Note:Upper Bound would work as lower bound and vice versa
//  Find won't work in less_equal, so use find_by_order(order_of_key(a[i]))
//  To check existence maintain a map
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template <class T>
using pbds = tree<T, null_type, less_equal<T>, rb_tree_tag,
        tree_order_statistics_node_update>;

#define ll long long
#define lld long double
#define PI 3.141592653589793238462
#define pb push_back
#define ppb pop_back
#define fr(i,a,b)    for(int i=a;i<b;i++)
#define rfr(i,a,b)   for(int i=a;i>=b;i--)
#define array(a,n)     fr(i,0,n) cin>>a[i]
#define INF 1e9
#define nl endl
#define ff first
#define ss second
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define getunique(v) {sort(v.begin(), v.end()); v.erase(unique(v.begin(), v.end()), v.end());}
#define pq(t) priority_queue<t>
#define rpq(t) priority_queue<t, vector<t>, greater<t>>
#define out(A) {for(auto a : A)cout << a << " "; cout << endl;}
/*---------------------------------------------------------------------------------------------------------------------------*/
ll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}
void google(int t) {cout << "Case #" << t << ": ";}
vector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}
ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}
template<typename T> void chkmin(T& x, T y) {if(x > y) x = y;}
template<typename T> void chkmax(T& x, T y) {if(x < y) x = y;}
bool sortbysec(const pair<int,int> &a,const pair<int,int> &b) {return (a.second < b.second);}
void yesno(bool a) {cout << (a ? "Yes\n" : "No\n");}
/*--------------------------------------------------------------------------------------------------------------------------*/

const ll mod = 1e9 + 7;
const ll mxll = 1e18;

// MODULO ARITHMATICS
#define ceil(n, m) (((n) + (m) - 1) / (m))
#define addm(a, b, m) (((a % m) + (b % m)) % m)
#define subm(a, b, m) (((a % m) - (b % m) + m) % m)
#define mulm(a, b, m) (((a % m) * (b % m)) % m)

// FUNCTIONS
ll binpow(ll b, ll e, ll mod = LLONG_MAX) {
    ll r = 1;
    b %= mod;
    while (e > 0) {
        if (e & 1) {
            r = mulm(r, b, mod);
        }
        e >>= 1;
        b = mulm(b, b, mod);
    }
    return r;
}

int lowerbound(vector<long long>& arr, ll elem)
{
    int l = 0;
    int r = arr.size();
    while(l < r) {
        int mid = (l+r)/2;
        if(arr[mid] >= elem) {
            r = mid;
        } else l = mid+1;
    }
    return l;
}

int upperbound(vector<long long>& arr,ll elem)
{
    int l = 0;
    int r = arr.size();
    while(l < r) {
        int mid = (l+r)/2;
        if(arr[mid] > elem) {
            r = mid;
        } else l = mid+1;
    }
    return r;
}

bool isSorted(vector<char>& str){
    for(ll i = 1; i < str.size(); i ++){
        if(str[i] < str[i-1]) return false;
    }
    return true;
}

ll lcm(ll a,ll b){
    return (a/gcd(a,b))*b;
}

bool pal(int n){
    int r = 0;
    int tmp = n;
    while(tmp != 0){
        r = r*10+tmp%10;
        tmp /=10;
    }
    return r==n;
}

vector<ll> factors(ll n) {
    vector<ll> factors;
    while (n % 2 == 0) {
        factors.push_back(2);
        n /= 2;
    }
    for (ll i = 3; i * i <= n; i += 2) {
        while (n % i == 0) {
            factors.push_back(i);
            n /= i;
        }
    }
    if (n > 2) {
        factors.push_back(n);
    }
    return factors;
}

ll gcdExtended(ll a, ll b, ll &x, ll &y) {
    if (a == 0) {
        x = 0;
        y = 1;
        return b;
    }
    ll x1, y1;
    ll gcd = gcdExtended(b % a, a, x1, y1);
    x = y1 - (b / a) * x1;
    y = x1;
    return gcd;
}

ll modInverse(ll a, ll m) {
    ll x, y;
    ll gcd = gcdExtended(a, m, x, y);
    if (gcd != 1) return -1;
    ll result = (x % m + m) % m;
    return result;
}

vector<string> split(string & s, char b, bool empty = false){
    stringstream ss(s);
    vector<string> tokens; string token;
    while(getline(ss, token, b)){
        if(!empty && !token.size()) continue;
        tokens.push_back(token);
    }
    return tokens;
}

vector<ll> fact_;

void factorials(ll n, ll m = mod){
    fact_.push_back(1);
    for (int i = 1; i <=n; ++i) {
        fact_.push_back(mulm(fact_.back(), i, m));
    }
}

vector<ll> divisors;

void printDivisors(int n){
    for (int i=1; i<=sqrt(n); i++){
        if (n%i == 0){
            if (n/i == i) {
                divisors.push_back(i);
            }else {
                divisors.push_back(i);
                divisors.push_back(n / i);
            }
        }
    }
    sort(all(divisors));
}

vector<int> computeLPS(const string& pattern) {
    int len = 0;
    vector<int> lps(pattern.size(), 0);

    int i = 1;
    while (i < pattern.size()) {
        if (pattern[i] == pattern[len]) {
            len++;
            lps[i] = len;
            i++;
        } else {
            if (len != 0) {
                len = lps[len - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
    return lps;
}

vector<int> KMPSearch(const string& text, const string& pattern) {
    vector<int> indexes;
    int N = text.size();
    int M = pattern.size();

    vector<int> lps = computeLPS(pattern);

    int i = 0;
    int j = 0;

    while (i < N) {
        if (pattern[j] == text[i]) {
            i++;
            j++;
        }

        if (j == M) {
            indexes.push_back(i - j);
            j = lps[j - 1];
        } else if (i < N && pattern[j] != text[i]) {
            if (j != 0)
                j = lps[j - 1];
            else
                i++;
        }
    }

    return indexes;
}


vector<int> prev_smaller(vector<int>& nums,int n){
    stack<int>s1;
    vector<int> minp(n,-1);
    for(int i=0;i<n;i++){
        while(!s1.empty() && nums[s1.top()] >= nums[i]){
            s1.pop();
        }
        if(!s1.empty()){
            minp[i] = s1.top();
        }
        s1.push(i);
    }
    return minp;
}
vector<int> next_smaller(vector<int>& nums,int n){
    stack<int>s1;
    vector<int> minn(n,n);
    for(int i=n-1;i>=0;i--){
        while(!s1.empty() && nums[s1.top()] > nums[i]){
            s1.pop();
        }
        if(!s1.empty()){
            minn[i] = s1.top();
        }
        s1.push(i);
    }
    return minn;
}

void solve()
{

}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
#ifndef ONLINE_JUDGE
    freopen("input.txt","r", stdin);
    freopen("output.txt","w",stdout);
#endif
    int t;
    t = 1;
    cin >> t;
    int cnt = 0;
    while (t--)
    {
//        cout << "Case #" << ++cnt << ": ";
        solve();
    }
}
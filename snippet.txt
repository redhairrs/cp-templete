
static int count(String X) {
        HashSet<Integer> set=new HashSet<>();
        for(char x:X.toCharArray())set.add(x-'0');
        return set.size();
    }

public static long gcd(long a, long b)
    {
        if(a > b)
            a = (a+b)-(b=a);
        if(a == 0L)
            return b;
        return gcd(b%a, a);
    }

static boolean isPalindrome(String str) {
        if (str == null || str.length() == 0) {
            return true;
        }
        str = str.toLowerCase();
        for (int i = 0; i <= str.length() / 2; i++) {
            char start = str.charAt(i);
            char end = str.charAt(str.length() - 1 - i);
            if (start != end) {
                return false;
            }
        }
        return true;
    }

public static boolean isPrime(long n)
    {
        if(n < 2) return false;
        if(n == 2 || n == 3) return true;
        if(n%2 == 0 || n%3 == 0) return false;
        long sqrtN = (long)Math.sqrt(n)+1;
        for(long i = 6L; i <= sqrtN; i += 6) {
            if(n%(i-1) == 0 || n%(i+1) == 0) return false;
        }
        return true;
    }

for($ITER_TYPE$ $ITER$ = $COLLECTION$.iterator(); $ITER$.hasNext(); ) {
  $ELEMENT_TYPE$ $VAR$ =$CAST$ $ITER$.next();
  $END$
}

for(int $INDEX$ = 0; $INDEX$ < $ARRAY$.length; $INDEX$++) {
  $ELEMENT_TYPE$ $VAR$ = $ARRAY$[$INDEX$];
  $END$
}

ArrayList<Integer> list = new ArrayList<>();

HashMap<Integer,Integer> map = new HashMap<>();

out.print($END$+" ");

out.println($END$);

static long mod=(long) 998244353,INF=Long.MAX_VALUE;
static  long pow(long a,long b) {
    //long mod=1000000007;
    long pow=1;
    long x=a;
    while(b!=0)
    {
        if((b&1)!=0)pow=(pow*x)%mod;
        x=(x*x)%mod;
        b/=2;
    }
    return pow;
}

public static void sort(int[] arr)
    {
        //because Arrays.sort() uses quicksort which is dumb
        //Collections.sort() uses merge sort
        ArrayList<Integer> ls = new ArrayList<Integer>();
        for(int x: arr)
            ls.add(x);
        Collections.sort(ls);
        for(int i=0; i < arr.length; i++)
            arr[i] = ls.get(i);
    }

String $VAR$ = in.nextLine();
static void swap(int X[],int i,int j) {
        int x=X[i];
        X[i]=X[j];
        X[j]=x;
    }

static void swap(char X[],int i,int j) {
        char x=X[i];
        X[i]=X[j];
        X[j]=x;
    }
